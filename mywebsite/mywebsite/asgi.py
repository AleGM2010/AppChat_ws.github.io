import os

from django.core.asgi import get_asgi_application
from channels.routing import ProtocolTypeRouter,URLRouter
# Quiero traer un middelware de autenticacion 
# Â¿Para que hago esto?, Â¿cual es el proposito de este middleware y que es un middleware?
from channels.auth import AuthMiddlewareStack  # âœ… Este middleware envuelve las conexiones WebSocket con informaciÃ³n de usuario autenticado.
# Â¿Para quÃ© hago esto?
# â†’ Para que puedas acceder a `scope["user"]` en tus Consumers.
# Â¿QuÃ© es un middleware?
# â†’ Es una capa intermedia que modifica o aÃ±ade lÃ³gica antes de que la peticiÃ³n 
#   llegue al handler (ej. agregar el usuario a la conexiÃ³n WebSocket).

# scope = informaciÃ³n de contexto de la conexiÃ³n.
# handler = lo que responde a un evento de conexiÃ³n o mensaje.


#region Teoria
"""
Teoria: 

ğŸ§  Â¿QuÃ© es un scope en Django Channels?
Es un diccionario que contiene informaciÃ³n sobre la conexiÃ³n actual (como contexto).

ğŸ“¦ Incluye:

scope["user"]: el usuario autenticado (si usÃ¡s AuthMiddlewareStack)

scope["path"]: la URL de conexiÃ³n

scope["type"]: tipo de conexiÃ³n ("websocket", "http")

scope["session"]: la sesiÃ³n actual

scope["headers"]: cabeceras HTTP

ğŸ§© Es como request en vistas tradicionales, pero adaptado a conexiones WebSocket o ASGI.


ğŸ§  Â¿QuÃ© es un handler?
Un handler es una funciÃ³n o mÃ©todo que recibe y responde a un evento.

Ejemplos en Django Channels:

connect() â†’ handler que maneja cuando el cliente se conecta.

receive() â†’ cuando el cliente envÃ­a un mensaje.

disconnect() â†’ cuando se desconecta.

ğŸ“Œ Equivale a def get() o def post() en una vista CBV.


"""
#endregion

# Tambien el routing 
import chat.routing
import juego.routing


os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mywebsite.settings')

application = ProtocolTypeRouter({
    "http": get_asgi_application(),
    "websocket": AuthMiddlewareStack(
        URLRouter(chat.routing.websocket_urlpatterns + juego.routing.websocket_urlpatterns)
    ),
})

